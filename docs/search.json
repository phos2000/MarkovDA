[
  {
    "objectID": "MarkovDA.html",
    "href": "MarkovDA.html",
    "title": "How to Create Markov Model using R",
    "section": "",
    "text": "We are tasked to examine the economic value of new treatments for a rare type of cancer. The new treatments were designed to increase the health of patients in remission & to prevent them from relapsing back to either Stage 1 or Stage 2.\n\nBefore the new drugs development, the transition probabilities were the following:\n\n\n\n\n\n\n\nDescription\nProbability\n\n\n\n\nProbability of transition from Healthy to Stage 1\n5%\n\n\nProbability of transition from Healthy to Stage 2\n2%\n\n\nProbability of transition from Healthy to Stage 3\n1%\n\n\nProbability of transition from Stage 1 to Stage 2\n10%\n\n\nProbability of transition from Stage 1 to Remission\n25%\n\n\nProbability of transition from Stage 2 to Stage 1\n5%\n\n\nProbability of transition from Stage 2 to Stage 3\n15%\n\n\nProbability of transition from Stage 2 to Remission\n20%\n\n\nProbability of transition from Stage 3 to Stage 2\n5%\n\n\nProbability of transition from Stage 3 to Death\n45%\n\n\nProbability of transition from Remission to Stage 1\n10%\n\n\nProbability of transition from Remission to Stage 2\n5%\n\n\nProbability of transition from Remission to Stage 1 when on Treatment A\n10%\n\n\nProbability of transition from Remission to Stage 2 when on Treatment A\n5%\n\n\nProbability of transition from Remission to Stage 1 when on Treatment B\n8%\n\n\nProbability of transition from Remission to Stage 2 when on Treatment B\n3%\n\n\nProbability of transition from Remission to Stage 1 when on Treatment C\n5%\n\n\nProbability of transition from Remission to Stage 2 when on Treatment C\n2%\n\n\n\nEach health state is associated with the following utilities:\n\n\n\nDescription\nUtility\n\n\n\n\nUtility of Healthy per cycle\n1\n\n\nUtility of Stage 1 per cycle\n0.88\n\n\nUtility of Stage 2 per cycle\n0.71\n\n\nUtility of Stage 3 per cycle\n0.36\n\n\nUtility of Remission per cycle\n0.95\n\n\n\nPatients in certain health states have to take medications and visit their treating physician on a regular basis:\n\n\n\nDescription\nCosts / Other\n\n\n\n\nNumber of visits per cycle in Stage 1\n4\n\n\nNumber of visits per cycle in Stage 2\n12\n\n\nNumber of visits per cycle in Stage 3\n52\n\n\nNumber of visits per cycle in Remission\n1\n\n\nCost of a visit\n$ 100\n\n\nCost of treatment per cycle in Stage 1\n$ 1,200\n\n\nCost of treatment per cycle in Stage 2\n$ 6,000\n\n\nCost of treatment per cycle in Stage 3\n$ 18,000\n\n\nCost of status quo per cycle in Remission\n$ 400\n\n\nCost of Treatment A per cycle in Remission\n$ 10,000\n\n\nCost of Treatment B per cycle in Remission\n$ 7,500\n\n\nCost of Treatment C per cycle in Remission\n$ 12,500\n\n\n\nAssume an annual discount rate of 3% and a 30-year time horizon.\n\n\n\n\n\n\nNote\n\n\n\nWhat You Need to Prepare:\n\nthe Exercise excel file: we have the initial values for all the parameters and the procedures displayed in the excel formula.\nthe Function R file: it includes some advanced and long functions for the process. Lots of the functions are included in the dampack R package.\nR Studio or R. â€“ I highly recommende you to use R Studio"
  },
  {
    "objectID": "MarkovDA.html#if-all-probabilities-known-no-rate-to-probabilities-transitions",
    "href": "MarkovDA.html#if-all-probabilities-known-no-rate-to-probabilities-transitions",
    "title": "How to Create Markov Model using R",
    "section": "If All Probabilities Known (No Rate-to-Probabilities Transitions)",
    "text": "If All Probabilities Known (No Rate-to-Probabilities Transitions)\n\n\nCode\nbuild_matrices <- function(params, mtype) {\n  m_X = list()\n  for (m in v_names_str){\n    m_X_ = matrix(0, nrow = v_n_states, ncol = v_n_states, dimnames = list(v_names_states,v_names_states))\n    for (i in rownames(m_X_)) {\n      for (j in colnames(m_X_)) {\n        if (paste0(mtype,i,j) %in% names(params)) {\n          m_X_[i,j] = as.numeric(params[paste0(mtype,i,j)])\n        }\n      }\n    }\n    \n    if (mtype == \"p\") {\n      ## if drawing the probabilities from the given parameters and building a probability matrix\n      \n      if (paste0(\"pRemissionStage1_\",m) %in% names(params)) {\n        ## the relapse probs change over the strategies. A special rule here. \n        m_X_[\"Remission\",\"Stage1\"] = as.numeric(params[paste0(\"pRemissionStage1_\",m)])\n        m_X_[\"Remission\",\"Stage2\"] = as.numeric(params[paste0(\"pRemissionStage2_\",m)])\n      }\n        \n      for (n in 1:v_n_states) {\n        m_X_[n,n] = 1-sum(m_X_[n,])\n      }\n    } else {\n      ## if drawing the rates from the given paramters and building a rate matrix\n      \n      if (paste0(\"hrRemissionStage1_\",m) %in% names(params)) {\n        ## use the hazard ratios to adjust the relapse rates over the strategies. \n        m_X_[\"Remission\",\"Stage1\"] = m_X_[\"Remission\",\"Stage1\"] * as.numeric(params[paste0(\"hrRemissionStage1_\",m)])\n        m_X_[\"Remission\",\"Stage2\"] = m_X_[\"Remission\",\"Stage2\"] * as.numeric(params[paste0(\"hrRemissionStage2_\",m)])\n      }\n        \n      for (n in 1:v_n_states) {\n        m_X_[n,n] = -sum(m_X_[n,])\n      }\n    }\n    m_X[[m]] = m_X_\n  }\n  m_X\n}\n    \nm_P = build_matrices(params_sc, \"p\")\n\nm_P\n\n\n$quo\n          Healthy Stage1 Stage2 Stage3 Remission Death\nHealthy      0.92   0.05   0.02   0.01      0.00  0.00\nStage1       0.00   0.65   0.10   0.00      0.25  0.00\nStage2       0.00   0.05   0.60   0.15      0.20  0.00\nStage3       0.00   0.00   0.05   0.50      0.00  0.45\nRemission    0.00   0.10   0.05   0.00      0.85  0.00\nDeath        0.00   0.00   0.00   0.00      0.00  1.00\n\n$trtA\n          Healthy Stage1 Stage2 Stage3 Remission Death\nHealthy      0.92   0.05   0.02   0.01      0.00  0.00\nStage1       0.00   0.65   0.10   0.00      0.25  0.00\nStage2       0.00   0.05   0.60   0.15      0.20  0.00\nStage3       0.00   0.00   0.05   0.50      0.00  0.45\nRemission    0.00   0.02   0.01   0.00      0.97  0.00\nDeath        0.00   0.00   0.00   0.00      0.00  1.00\n\n$trtB\n          Healthy Stage1 Stage2 Stage3 Remission Death\nHealthy      0.92   0.05   0.02   0.01      0.00  0.00\nStage1       0.00   0.65   0.10   0.00      0.25  0.00\nStage2       0.00   0.05   0.60   0.15      0.20  0.00\nStage3       0.00   0.00   0.05   0.50      0.00  0.45\nRemission    0.00   0.08   0.03   0.00      0.89  0.00\nDeath        0.00   0.00   0.00   0.00      0.00  1.00\n\n$trtC\n          Healthy Stage1 Stage2 Stage3 Remission Death\nHealthy      0.92   0.05   0.02   0.01      0.00  0.00\nStage1       0.00   0.65   0.10   0.00      0.25  0.00\nStage2       0.00   0.05   0.60   0.15      0.20  0.00\nStage3       0.00   0.00   0.05   0.50      0.00  0.45\nRemission    0.00   0.05   0.02   0.00      0.93  0.00\nDeath        0.00   0.00   0.00   0.00      0.00  1.00\n\n\nIf having a rate matrix instead of all the probabilities, there are two ways to convert it to a probability matrix."
  },
  {
    "objectID": "MarkovDA.html#rate-to-probability-conversion-formulas",
    "href": "MarkovDA.html#rate-to-probability-conversion-formulas",
    "title": "How to Create Markov Model using R",
    "section": "Rate-to-Probability Conversion Formulas",
    "text": "Rate-to-Probability Conversion Formulas\n\\[\np_{HealthyStage1}= \\frac{r_{HealthyStage1}}{r_{HealthyStage1}+r_{HealthyStage2}+r_{HealthyStage3}}\\big ( 1 - e^{-(r_{HealthyStage1}+r_{HealthyStage2}+r_{HealthyStage3})\\Delta t}\\big )\n\\]\n\\[\np_{HealthyHealthy} = e^{-(r_{HealthyStage1}+r_{HealthyStage2}+r_{HealthyStage3})\\Delta t}\n\\]\nIn the above formulas, r_* is a transition rate and \\(\\Delta t\\) is the timestep, which in the Excel document is set to a value of 1 and stored in the variable n_cycle_length.\n\n\nCode\nm_P_form = list()\nm_P_ = matrix(0, nrow = v_n_states, ncol = v_n_states, dimnames = list(v_names_states,v_names_states))\n\nfor (i in v_names_states) {\n  tempsum = sum(as_tibble(params_sc) %>% select(starts_with(paste0(\"r\",i))))\n  for (j in v_names_states) {\n    if (paste0(\"r\",i,j) %in% names(params_sc)) {\n      ptemp = params_sc[[paste0(\"r\",i,j)]] * (1 - exp(-tempsum)) / tempsum\n    } else if (j == i) {\n      ptemp = exp(-tempsum)\n    } else {\n      ptemp = 0\n    }\n    m_P_[i,j] = ptemp\n  }\n}\nm_P_form[[v_names_str[1]]] = m_P_\n\nfor (str in v_names_str[2:4]) {\n  params_sc[[paste0(\"rRemissionStage1_\",str)]] = params_sc$rRemissionStage1 * params_sc[[paste0(\"hrRemissionStage1_\",str)]]\n  params_sc[[paste0(\"rRemissionStage2_\",str)]] = params_sc$rRemissionStage2 * params_sc[[paste0(\"hrRemissionStage2_\",str)]]\n  m_P_form[[str]] = m_P_\n  tempsum = params_sc[[paste0(\"rRemissionStage1_\",str)]] + params_sc[[paste0(\"rRemissionStage2_\",str)]]\n  m_P_form[[str]][\"Remission\", \"Stage1\"] = params_sc[[paste0(\"rRemissionStage1_\",str)]] * (1 - exp(-tempsum)) / tempsum\n  m_P_form[[str]][\"Remission\", \"Stage2\"] = params_sc[[paste0(\"rRemissionStage2_\",str)]] * (1 - exp(-tempsum)) / tempsum\n  m_P_form[[str]][\"Remission\", \"Remission\"] = exp(-tempsum)\n}\n\nm_P_form\n\n\n$quo\n          Healthy Stage1 Stage2 Stage3 Remission Death\nHealthy      0.92   0.05   0.02   0.01      0.00  0.00\nStage1       0.00   0.65   0.10   0.00      0.25  0.00\nStage2       0.00   0.05   0.60   0.15      0.20  0.00\nStage3       0.00   0.00   0.05   0.50      0.00  0.45\nRemission    0.00   0.10   0.05   0.00      0.85  0.00\nDeath        0.00   0.00   0.00   0.00      0.00  1.00\n\n$trtA\n          Healthy Stage1 Stage2 Stage3 Remission Death\nHealthy      0.92   0.05   0.02   0.01      0.00  0.00\nStage1       0.00   0.65   0.10   0.00      0.25  0.00\nStage2       0.00   0.05   0.60   0.15      0.20  0.00\nStage3       0.00   0.00   0.05   0.50      0.00  0.45\nRemission    0.00   0.02   0.01   0.00      0.97  0.00\nDeath        0.00   0.00   0.00   0.00      0.00  1.00\n\n$trtB\n          Healthy Stage1 Stage2 Stage3 Remission Death\nHealthy      0.92   0.05   0.02   0.01      0.00  0.00\nStage1       0.00   0.65   0.10   0.00      0.25  0.00\nStage2       0.00   0.05   0.60   0.15      0.20  0.00\nStage3       0.00   0.00   0.05   0.50      0.00  0.45\nRemission    0.00   0.08   0.03   0.00      0.89  0.00\nDeath        0.00   0.00   0.00   0.00      0.00  1.00\n\n$trtC\n          Healthy Stage1 Stage2 Stage3 Remission Death\nHealthy      0.92   0.05   0.02   0.01      0.00  0.00\nStage1       0.00   0.65   0.10   0.00      0.25  0.00\nStage2       0.00   0.05   0.60   0.15      0.20  0.00\nStage3       0.00   0.00   0.05   0.50      0.00  0.45\nRemission    0.00   0.05   0.02   0.00      0.93  0.00\nDeath        0.00   0.00   0.00   0.00      0.00  1.00"
  },
  {
    "objectID": "MarkovDA.html#rate-to-probability-matrix-exponentiation",
    "href": "MarkovDA.html#rate-to-probability-matrix-exponentiation",
    "title": "How to Create Markov Model using R",
    "section": "Rate-to-Probability Matrix Exponentiation",
    "text": "Rate-to-Probability Matrix Exponentiation\nInstead of converting the rates one-by-one, matrix exponentiation is a quicker way to convert all.\nConsidering the covariance of the rates here, it is also more accurate.\nHowever, if we have both rates and probabilities mixed, there will be two steps:\n\nconvert all the probabilities to rates using the conversion formula;\nuse the matrix exponentiation to convert the rate matrix to the probability matrix.\n\n\n\nCode\nm_R = build_matrices(params_sc, \"r\")\nm_P_expm = list()\nfor (m in v_names_str){\n  m_P_expm[[m]] = expm(m_R[[m]])\n}\nm_P_expm\n\n\n$quo\n          Healthy Stage1 Stage2 Stage3 Remission   Death\nHealthy      0.92 0.0413  0.018 0.0086    0.0088 0.00287\nStage1       0.00 0.6649  0.084 0.0072    0.2425 0.00170\nStage2       0.00 0.0500  0.611 0.1057    0.1923 0.04056\nStage3       0.00 0.0015  0.038 0.5035    0.0058 0.45087\nRemission    0.00 0.0827  0.044 0.0036    0.8689 0.00082\nDeath        0.00 0.0000  0.000 0.0000    0.0000 1.00000\n\n$trtA\n          Healthy Stage1 Stage2  Stage3 Remission   Death\nHealthy      0.92 0.0411 0.0182 0.00864    0.0092 0.00287\nStage1       0.00 0.6549 0.0784 0.00693    0.2581 0.00165\nStage2       0.00 0.0420 0.6072 0.10550    0.2048 0.04052\nStage3       0.00 0.0013 0.0382 0.50354    0.0061 0.45087\nRemission    0.00 0.0165 0.0088 0.00071    0.9739 0.00016\nDeath        0.00 0.0000 0.0000 0.00000    0.0000 1.00000\n\n$trtB\n          Healthy Stage1 Stage2 Stage3 Remission  Death\nHealthy      0.92 0.0413  0.018 0.0086    0.0089 0.0029\nStage1       0.00 0.6624  0.081 0.0071    0.2478 0.0017\nStage2       0.00 0.0479  0.609 0.1056    0.1965 0.0405\nStage3       0.00 0.0015  0.038 0.5035    0.0059 0.4509\nRemission    0.00 0.0659  0.027 0.0022    0.9041 0.0005\nDeath        0.00 0.0000  0.000 0.0000    0.0000 1.0000\n\n$trtC\n          Healthy Stage1 Stage2 Stage3 Remission   Death\nHealthy      0.92 0.0412  0.018 0.0086    0.0091 0.00287\nStage1       0.00 0.6586  0.080 0.0070    0.2530 0.00167\nStage2       0.00 0.0449  0.608 0.1056    0.2007 0.04053\nStage3       0.00 0.0014  0.038 0.5035    0.0060 0.45087\nRemission    0.00 0.0412  0.018 0.0014    0.9390 0.00033\nDeath        0.00 0.0000  0.000 0.0000    0.0000 1.00000"
  },
  {
    "objectID": "AddingMortality.html",
    "href": "AddingMortality.html",
    "title": "Add the Time-Varying Variable into Markov Model",
    "section": "",
    "text": "Based on the last tutorial of Markov Model in R, we will add background mortality using a cause-deleted life table."
  },
  {
    "objectID": "AddingMortality.html#where-to-get-the-us-life-table",
    "href": "AddingMortality.html#where-to-get-the-us-life-table",
    "title": "Add the Time-Varying Variable into Markov Model",
    "section": "Where to get the US life table",
    "text": "Where to get the US life table\nhttps://www.cdc.gov/nchs/products/life_tables.htm [CDC website]\nWe are using United States Life Tables(2020) â€“ remember to distinguish the life tables for the male and the female.\nMale: https://ftp.cdc.gov/pub/Health_Statistics/NCHS/Publications/NVSR/71-01/Table02.xlsx\nFemale: https://ftp.cdc.gov/pub/Health_Statistics/NCHS/Publications/NVSR/71-01/Table03.xlsx\n\n\n\nName\nDescription\n\n\n\n\nqx\nProbability of dying between ages x and x + 1\n\n\nlx\nNumber surviving to age x\n\n\ndx\nNumber dying between ages x and x + 1\n\n\nLx\nPerson-years lived between ages x and x + 1\n\n\nTx\nTotal number of person-years lived above age x\n\n\nex\nExpectation of life at age x\n\n\n\n\n\nCode\ninput_file = normalizePath(here(\"exercise/markov_exercise_phd.xlsx\"))\nlife_table_raw = readxl::read_xlsx(input_file,sheet=\"Life Table - Male\",col_types =\"numeric\")[-1,]\nnames(life_table_raw) = c(\"Age\", \"qx\", \"lx\", \"dx\", \"Lx\", \"Tx\", \"ex\")"
  },
  {
    "objectID": "AddingMortality.html#where-to-get-the-specific-cause-death",
    "href": "AddingMortality.html#where-to-get-the-specific-cause-death",
    "title": "Add the Time-Varying Variable into Markov Model",
    "section": "Where to get the specific-cause death",
    "text": "Where to get the specific-cause death\nHere we set all our patients are initially 45-yr men with the prostate cancer.\nhttps://vizhub.healthdata.org/gbd-results/[GBD query tool]\nGBD results provide the % of deaths due to a specific cause by age (every 5 years) and sex groups.\nUsing filters like:"
  },
  {
    "objectID": "AddingMortality.html#how-to-build-the-cause-deleted-life-table",
    "href": "AddingMortality.html#how-to-build-the-cause-deleted-life-table",
    "title": "Add the Time-Varying Variable into Markov Model",
    "section": "How to build the cause-deleted life table",
    "text": "How to build the cause-deleted life table\nThe GBD result of death caused by prostate cancer is divided by age groups, which we need to expand to match the original life table.\nnon-Cause death = all the death * (1 - percent_of_caused_death)\n\n\nCode\ncause_death_m = read.csv(\"exercise/GBD_2019_prostate.csv\") %>%\n  select(age,val,upper,lower)\n\ncause_death_m1 = cause_death_m %>% filter(str_detect(age, \"<\")) %>%\n  mutate(start = 0, \n         reptimes = as.numeric(str_sub(age,\n                                       unlist(gregexpr('<', age))[1]+1,\n                                       unlist(gregexpr(' ', age))[1]-1)),\n         end = start + reptimes - 1)\n\ncause_death_m2 = cause_death_m %>% \n  filter(str_detect(age,\"-\") & !str_detect(age, \" \")) %>%\n  rowwise %>%\n  mutate(start = as.numeric(str_sub(age,1,unlist(gregexpr('-', age))[1]-1)),\n         end = as.numeric(str_sub(age,unlist(gregexpr('-', age))[1]+1,str_length(age))),\n         reptimes = end - start + 1)\n\ncause_death_m3 = cause_death_m %>% filter(str_detect(age,\"-\") & str_detect(age, \" \")) %>%\n  rowwise %>%\n  mutate(start = as.numeric(str_sub(age,1,unlist(gregexpr('-', age))[1]-1)),\n         end = as.numeric(str_sub(age,unlist(gregexpr('-', age))[1]+1,unlist(gregexpr(' ', age))[1]-1)),\n         reptimes = end - start + 1)\n\ncause_death_male = rbind(\n  as.data.frame(lapply(cause_death_m1, rep, cause_death_m1$reptimes)) %>%\n    group_by(age) %>%\n    mutate(Age = start - 1 + 1:n()) %>%\n    ungroup(),\n  as.data.frame(lapply(cause_death_m2, rep, cause_death_m2$reptimes)) %>%\n    group_by(age) %>%\n    mutate(Age = start - 1 + 1:n()) %>%\n    ungroup(),\n  as.data.frame(lapply(cause_death_m3, rep, cause_death_m3$reptimes)) %>%\n    group_by(age) %>%\n    mutate(Age = start - 1 + 1:n()) %>%\n    ungroup()) %>%\n  arrange(Age) %>%\n  select(Age, val, upper, lower)\n\nmaxage = min(max(life_table_raw$Age), max(cause_death_male$Age))\nminage_cause = min(cause_death_male$Age)\nmlt2020 = life_table_raw[(minage_cause+1):(maxage+1),]\n\n## dx\nmlt2020_nonCause = rbind(life_table_raw[1:minage_cause, c(\"Age\",\"dx\")],\n                         data.frame(Age = minage_cause:maxage, \n                                    dx = mlt2020[, \"dx\"] * (1-cause_death_male[, \"val\"])),\n                         life_table_raw[(maxage+2):nrow(life_table_raw),c(\"Age\",\"dx\")])\n\nmlt2020_cause = data.frame(Age = minage_cause:maxage,\n                         dx = mlt2020[, \"dx\"] * cause_death_male[, \"val\"])\n\n# sum(mlt2020_cause$dx) + sum(mlt2020_nonCause$dx)\n\n# back dx to qx\nfor (i in 1:nrow(mlt2020_nonCause)){\n  mlt2020_nonCause[i, \"qx\"] = mlt2020_nonCause[i, \"dx\"] / sum(mlt2020_nonCause[i:nrow(mlt2020_nonCause), \"dx\"])\n}"
  }
]